// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2023-05-19 12:36:19.357130901 +0000 UTC m=+11.015720743

package docs

import (
	"bytes"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "swagger": "2.0",
    "info": {
        "description": "AWS lambda API",
        "title": "Go-ToDoList AWS System API",
        "contact": {},
        "license": {},
        "version": "1.0"
    },
    "host": "localhost:9753",
    "basePath": "/api/v1",
    "paths": {
        "/auth/login": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "\"Auth\""
                ],
                "summary": "\"User Login\"",
                "parameters": [
                    {
                        "description": "User Login",
                        "name": "*",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/authRequest.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successfully",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Failed to process request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Failed to process request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to process request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "\"Auth\""
                ],
                "summary": "\"User Logout\"",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer",
                        "description": "example:Bearer token (Bearer+space+token).",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully logged out",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Failed to process request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Failed to process request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "(Token is invalid in the server. Token is not valid. Failed to process request)",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "\"Auth\""
                ],
                "summary": "\"User Refresh Token\"",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Bearer",
                        "description": "example:Bearer token (Bearer+space+token).",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successfully",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Failed to process request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "401": {
                        "description": "Failed to process request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "(Token is invalid in the server. Token is not valid. Failed to process request)",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "\"Auth\""
                ],
                "summary": "\"User Register\"",
                "parameters": [
                    {
                        "description": "User Register",
                        "name": "*",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/authRequest.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Register Success",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Failed to process request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to process request",
                        "schema": {
                            "type": "object",
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "authRequest.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "authRequest.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "response.Response": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "object"
                },
                "errors": {
                    "type": "object"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo swaggerInfo

type s struct{}

func (s *s) ReadDoc() string {
	t, err := template.New("swagger_info").Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, SwaggerInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
